{"version":3,"file":"plugin/common.js","sources":["webpack:///._src_plugin_eventBus.js","webpack:///._src_plugin_hoc_utils.js","webpack:///._src_plugin_wgtsStore.js"],"sourcesContent":["class EventBus {\n  constructor() {\n    /**\n     * 构造函数需要存储的 event 事件\n     */\n    this.events = this.events || new Object();\n  }\n}\n\n/**\n * @name emit\n * @description 触发事件\n * @param {*} type 事件类型\n * @param  {...any} args 参数\n */\nEventBus.prototype.emit = function (type, ...args) {\n  const eventFuncs = this.events[type];\n  // 查看这个 type 的 event 有多少个回调函数，如果有多个需要依次调用。\n  if (Array.isArray(eventFuncs)) {\n    for (let index = 0; index < eventFuncs.length; index++) {\n      eventFuncs[index].apply(this, args)\n    }\n  }\n  else {\n    eventFuncs.apply(this, args)\n  }\n};\n\n/**\n * @name addEventListener\n * @description 增加监听函数\n * @param {*} type\n * @param {*} fun\n */\nEventBus.prototype.addListener = function (type, func) {\n  const eventFuncs = this.events[type];\n\n  // 如果从未注册过监听函数，则将函数放入数组存入对应的键名下\n  if (!eventFuncs) {\n    this.events[type] = [func]\n  }\n  // 如果注册过，则直接放入\n  else {\n    eventFuncs.push(func)\n  }\n}\n\n/**\n * @name removeListener\n * @description 删除监听事件\n * @param {*} type\n */\nEventBus.prototype.removeListener = function (type, func) {\n  if (this.events[type]) {\n    const eventFuncs = this.events[type]\n    if (Array.isArray(eventFuncs)) {\n      if (func) {\n        const funcIndex = eventFuncs.findIndex(eventFunc => func === eventFunc)\n        if (funcIndex !== -1) {\n          eventFuncs.splice(funcIndex, 1)\n        }\n        else {\n          console.warn(`eventBus may remove unexit func(${type})`)\n        }\n      }\n      else {\n        delete eventFuncs[type]\n      }\n    }\n    else {\n      delete eventFuncs[type]\n    }\n  }\n}\n\n// const eventBus = new EventBus();\n// eventBus.addListener(\"test\", function (...args) {\n// console.log('test',args);\n// });\n// eventBus.addListener(\"test\", function (...args) {\n//   console.log('test2',args);\n//   });\n// eventBus.emit(\"test\", [1, 3]);\n\n\nexport default new EventBus()\n\n","//getrand\nexport function rand (max) {\n  return Math.floor(Math.random() * max)\n}\n//getRandwords 获取随机字符串\nexport function getRandwords (ls = 8) {\n  var chars = ''\n  var passwords = []\n  var passwordUnique = true\n  var quantity = 1\n  chars += '0123456789'\n  chars += 'abcdefghijklmnopqrstuvwxyz'\n  chars += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n  while (passwords.length < quantity) {\n    var _chars = chars.split('')\n    var password = ''\n    for (var i = 0, l = ls; i < l; i++) {\n      if (_chars.length < 1) break\n\n      var idx = rand(_chars.length)\n      password += _chars[idx]\n      if (passwordUnique) _chars.splice(idx, 1)\n    }\n    if (passwords.indexOf(password) === -1) passwords.push(password)\n  }\n  return passwords.join('\\n')\n}","import { useState } from 'react'\nimport EventBus from './eventBus'\nclass WgtsStore {\n  wgts_store = {\n    __cmp_map:{\n\n    }\n  }\n  self = null\n  static create() {\n    if (!this.self || window.wgts_store) {\n      this.self = new WgtsStore()\n      window.wgts_store = this.self\n    }\n    return this.self || window.wgts_store\n  }\n  set(key,val){\n    this.wgts_store[key] = val    \n  }\n  // 对于组件队列的读写;\n  setCmp(type,key,val){\n    if(!this.wgts_store.__cmp_map[type]){\n      this.wgts_store.__cmp_map[type] = {[key]:val}\n    }else{\n      this.wgts_store.__cmp_map[type][key] = val\n    }\n  }\n  getCmp(type,key){\n    return this.wgts_store.__cmp_map[type][key]\n  }\n  // 获取组件code map；\n  getCmpList(type){\n    return this.wgts_store.__cmp_map[type]\n  }\n\n\n  addListener(key,fn){\n    EventBus.addListener(key,fn)\n  }\n  emit(key,arg){\n    EventBus.emit(key,arg)\n  }\n  showEvent(){\n    console.log('EventBus',EventBus)\n    console.log('this.wgts_store',this.wgts_store)\n  }\n  get(key){\n    return this.wgts_store[key]\n  }\n}\nfunction getStore() {\n  return WgtsStore.create()\n}\n\nexport const $w_store = getStore()\n\nfunction useCreateWgtsFn(refId = '', value = null) {\n  //console.log('useCreateWgtsFn----value----->', value)\n  const [wgt_value, _setValue] = useState(value)\n  $w_store.wgts_store[refId] = wgt_value\n  const setValue = (_value) => {\n    console.log('setValue__value', _value)\n    $w_store.wgts_store[refId] = _value\n    return _setValue(_value)\n  }\n  return [wgt_value, setValue]\n}\n\n// eslint-disable-next-line import/prefer-default-export\nexport const useCreateWgts = useCreateWgtsFn\n"],"mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACrFA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AC1BA;AACA;AACA;AAAA;;;;AACA;AACA;AADA;AACA;AAIA;;;;;AAQA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;;;AAvCA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;;;;;;AAmCA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}